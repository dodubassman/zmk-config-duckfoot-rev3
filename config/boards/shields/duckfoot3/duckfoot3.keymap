/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include "helper/keypos.h"
#include "helper/keymap_french_mac.h"



#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right-hand keys
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3                                         // thumb keys

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <175>;
    quick-tap-ms = <200>;
};


&mmv {
    acceleration-exponent=<1>;
    time-to-max-speed-ms = <200>;
};


/ { 

    behaviors {
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <1000>;                         // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;    // <---[[right-hand keys]]
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <1000>;                         // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;    // <---[[left-hand keys]]
        };
    };

        macros {
            eqarrw: eqarrw_macro {
                compatible = "zmk,behavior-macro";
                label = "EQARRW";
                #binding-cells = <0>;
                bindings = <&kp KP_EQUAL &kp GT>;
            };
            dasharrw: dasharrw_macro {
                compatible = "zmk,behavior-macro";
                label = "DASHARRW";
                #binding-cells = <0>;
                bindings = <&kp KP_MINUS &kp GT>;
            };
            
            trplgrv: trplgrv_macro {
                compatible = "zmk,behavior-macro";
                label = "TRPLGRV";
                #binding-cells = <0>;
                wait-ms = <1>;
                bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            };
        };

        combos {
            compatible = "zmk,combos";
            combo_arrow1 {
                timeout-ms = <20>;
                key-positions = <RT1 RM1>;
                bindings = <&eqarrw>;
            };
            combo_arrow2 {
                timeout-ms = <20>;
                key-positions = <RT2 RM2>;
                bindings = <&dasharrw>;
            };
            combo_esc {
                timeout-ms = <50>;
                key-positions = <LM1 LM2 LM3>;
                bindings = <&kp ESC>;
            };
            combo_ent {
                timeout-ms = <50>;
                key-positions = <RM1 RM2 RM3>;
                bindings = <&kp RET>;
            };
            combo_reset {
                timeout-ms = <20>;
                key-positions = <RT4 RM4>;
                bindings = <&bt BT_CLR>;
            };
            combo_lock_screen {
                timeout-ms = <20>;
                key-positions = <RT0 RT1 RM0 RM1>;
                bindings = <&kp LC(LS(K_PWR))>;
            };
            combo_print_screen {
                timeout-ms = <20>;
                key-positions = <LT0 LT1 LM0 LM1>;
                bindings = <&kp LS(LG(N4))>;
            };
        };

        keymap {
            compatible = "zmk,keymap";
            default_layer {
        bindings = <
        &none  &kp FR_Q    &kp FR_W            &kp FR_F                  &kp FR_P             &kp FR_B               &kp FR_J  &kp FR_L                  &kp FR_O             &kp FR_Y                &kp FR_QUOT          &none
        &none  &kp FR_A    &lh_pht LA(I) FR_R  &lh_pht RA(FR_ASTR) FR_S  &lh_pht FR_GRV FR_T  &kp FR_G               &kp FR_H  &lh_pht RA(FR_ASTR) FR_N  &rh_pht FR_GRV FR_E  &rh_pht LA(I) FR_I      &kp FR_U             &none
        &none  &mt LCTL Z  &mt LALT X          &mt LA(C) C               &lh_pht FR_DIAE D    &kp V                  &kp K     &rh_pht FR_DIAE FR_M      &kp COMMA            &mt RA(FR_SCLN) FR_DOT  &mt FR_BSLS FR_SLSH  &none
                           &kp K_MUTE          &kp LSHIFT                &mt LGUI BSPC        &mo 1                  &mo 2     &kp SPACE                 &mt RSHIFT TAB       &kp C_PP
        >;
        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP >;
        };
        
            num_layer {
        bindings = <
        &none  &kp FR_EXLM  &kp FR_AT           &kp FR_LBRC  &kp FR_RBRC  &kp FR_GRV              &kp FR_ASTR  &kp KP_N7    &kp KP_N8  &kp KP_N9  &kp KP_MINUS         &none
        &none  &kp FR_HASH  &mt FR_EURO FR_DLR  &kp FR_LPRN  &kp FR_RPRN  &kp FR_TILD             &kp FR_PLUS  &kp KP_N4    &kp KP_N5  &kp KP_N6  &kp KP_N0            &none
        &none  &kp FR_PERC  &kp FR_AMPS         &kp FR_LCBR  &kp FR_RCBR  &kp FR_PIPE             &kp FR_EQL   &kp KP_N1    &kp KP_N2  &kp KP_N3  &mt FR_COLN FR_SCLN  &none
                            &trans              &trans       &trans       &trans                  &trans       &kp FR_UNDS  &trans     &trans
        >;
        };
        
            arrow_layer {
        bindings = <
        &none  &kp F1  &kp F2  &kp F3     &kp F4     &kp F5               &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp HOME  &none
        &none  &kp F6  &kp F7  &mkp RCLK  &mkp LCLK  &kp F10              &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &trans    &none
        &none  &trans  &trans  &trans     &trans     &trans               &trans          &kp C_BRI_DN    &kp C_BRI_UP  &trans           &trans    &none
                       &trans  &trans     &trans     &trans               &trans          &trans          &trans        &trans
        >;
        };
    };
};
