/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <175>;
    quick-tap-ms;
};

&mmv {
    acceleration-exponent=<1>;
    time-to-max-speed-ms = <200>;
};


/ { 
        macros {
	        eqarrw: eqarrw_macro {
		        compatible = "zmk,behavior-macro";
		        label = "EQARRW";
		        #binding-cells = <0>;
		        bindings = <&kp KP_EQUAL>, <&kp GT>;
	        };
	        dasharrw: dasharrw_macro {
		        compatible = "zmk,behavior-macro";
		        label = "DASHARRW";
		        #binding-cells = <0>;
		        bindings = <&kp KP_MINUS>, <&kp GT>;
	        };
	        
	        trplgrv: trplgrv_macro {
		        compatible = "zmk,behavior-macro";
		        label = "TRPLGRV";
		        #binding-cells = <0>;
		        wait-ms = <1>;
		        bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
	        };
        };

        combos {
            compatible = "zmk,combos";
            combo_arrow1 {
                timeout-ms = <20>;
                key-positions = <7 19>;
                bindings = <&eqarrw>;
            };
            combo_arrow2 {
                timeout-ms = <20>;
                key-positions = <8 20>;
                bindings = <&dasharrw>;
            };
            combo_esc {
                timeout-ms = <20>;
                key-positions = <14 15 16>;
                bindings = <&kp ESC>;
            };
            combo_ent {
                timeout-ms = <20>;
                key-positions = <19 20 21>;
                bindings = <&kp RET>;
            };
            combo_reset {
                timeout-ms = <20>;
                key-positions = <10 22>;
                bindings = <&bt BT_CLR>;
            };
        };

        keymap {
            compatible = "zmk,keymap";
            
            default_layer {
		bindings = <
	    &none	&kp Q		&kp W		&kp F			&mt LS(LG(N4)) P	&kp B	 			&kp J		&mt LC(LS(K_PWR)) L	&kp O		&mt LA(I) Y			&kp SQT			&none
	    &none	&kp A		&kp R		&kp S			&kp T				&kp G	 			&kp H		&mt LA(E) N			&kp E		&mt LA(GRAVE) I		&kp U			&none
	    &none	&mt LCTL Z	&mt LALT X	&mt LA(C) C		&kp D				&kp V	 			&kp K		&mt LA(U) M			&kp COMMA	&mt LA(SEMI) DOT	&mt BSLH FSLH	&none
	    								&kp K_MUTE	&kp LSHIFT	&mt LGUI BSPC	&mo 1		&mo 2	&mt BSPC SPACE	&mt RSHIFT TAB	&kp C_PP
		>;
        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP >;
        };
		
			num_layer {
		bindings = <
	    &none	&kp EXCL	&kp AT					&kp LBKT	&kp RBKT	&kp GRAVE			&kp KP_MULTIPLY	&kp KP_N7	&kp KP_N8	&kp KP_N9	&kp KP_MINUS		&none
	    &none	&kp HASH	&mt LA(LS(AT)) DOLLAR	&kp LPAR	&kp RPAR	&kp TILDE			&kp PLUS		&kp KP_N4	&kp KP_N5	&kp KP_N6	&kp KP_N0			&none
	    &none	&kp PERCENT	&kp AMPS				&kp LBRC	&kp RBRC	&kp PIPE			&kp EQUAL		&kp KP_N1	&kp KP_N2	&kp KP_N3	&mt LS(SEMI) SEMI	&none
	    					&trans					&trans		&trans		&trans 				&trans			&kp UNDER		&trans		&trans
		>;
        };
		
			arrow_layer {
		bindings = <
	    &none	&kp F1	&kp F2	&kp F3		&kp F4		&kp F5			&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_RIGHT	&kp HOME	&none
	    &none	&kp F6	&kp F7  &mkp RCLK	&mkp LCLK	&kp F10			&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT		&trans		&none
	    &none	&trans	&trans	&trans		&trans		&trans			&trans			&kp C_BRI_DN	&kp C_BRI_UP	&trans			&trans		&none
	    				&trans	&trans		&trans		&trans			&trans			&trans			&trans			&trans
		>;
        };
	};
};
