/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };


/ { 
        behaviors {
	        eqarrw: eqarrw_macro {
		        compatible = "zmk,behavior-macro";
		        label = "EQARRW";
		        #binding-cells = <0>;
		        bindings = <&kp KP_EQUAL>, <&kp GT>;
	        };
	        dasharrw: dasharrw_macro {
		        compatible = "zmk,behavior-macro";
		        label = "DASHARRW";
		        #binding-cells = <0>;
		        bindings = <&kp KP_MINUS>, <&kp GT>;
	        };
	        trplgrv: trplgrv_macro {
		        compatible = "zmk,behavior-macro";
		        label = "TRPLGRV";
		        #binding-cells = <0>;
		        bindings = <&kp GRAVE>, <&kp GRAVE>, <&kp GRAVE>;
	        };
            grtrplgrv: grave_trplgrv {
                compatible = "zmk,behavior-mod-morph";
                label = "GRAVE_TRPLGRV";
                #binding-cells = <0>;
                bindings = <&kp GRAVE>, <&trplgrv>;
                mods = <(MOD_LGUI|MOD_RGUI)>;
            };
        };

        combos {
            compatible = "zmk,combos";
            combo_esc {
                timeout-ms = <50>;
                key-positions = <15 16>;
                bindings = <&kp ESC>;
            };
            combo_ent {
                timeout-ms = <50>;
                key-positions = <19 20>;
                bindings = <&kp RET>;
            };
            combo_reset {
                timeout-ms = <50>;
                key-positions = <10 11>;
                bindings = <&bt BT_CLR>;
            };
            combo_leftclick {
                timeout-ms = <50>;
                key-positions = <8 9>;
                bindings = <&mkp LCLK>;
            };
            combo_rightclick {
                timeout-ms = <50>;
                key-positions = <7 8>;
                bindings = <&mkp RCLK>;
            };
        };

        keymap {
            compatible = "zmk,keymap";
            
            default_layer {
		bindings = <
	    &trplgrv			&kp Q		&kp W		&kp F			&mt LS(LG(N4)) P	&kp B	 			&kp J		&mt LC(LS(K_PWR)) L	&kp O		&mt LA(I) Y			&kp SEMI		&kp BSPC
	    &kp LC(LG(SPACE))	&kp A		&kp R		&kp S			&kp T				&kp G	 			&kp H		&mt LA(E) N			&kp E		&mt LA(GRAVE) I		&kp U			&mt GRAVE SQT
	    &kp LS(TAB)			&mt LCTL Z	&mt LALT X	&mt LA(C) C		&kp D				&kp V	 			&kp K		&mt LA(U) M			&kp COMMA	&mt LA(SEMI) DOT	&mt BSLH FSLH	&kp TAB
	    											&kp K_MUTE	&kp LSHIFT	&mt LGUI BSPC	&mo 1		&mo 2		&kp SPACE		&mt RSHIFT TAB		&kp C_PP
		>;
        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP >;
        };
		
			num_layer {
		bindings = <
	    &trans	&kp EXCL	&kp AT					&kp LBKT	&kp RBKT	&kp PIPE			&kp KP_PLUS	&kp KP_N7	&kp KP_N8	&kp KP_N9	&kp KP_MINUS	&kp KP_EQUAL
	    &trans	&kp HASH	&mt LA(LS(AT)) DOLLAR	&kp LPAR	&kp RPAR	&kp TILDE			&dasharrw 	&kp KP_N4	&kp KP_N5	&kp KP_N6	&kp KP_N0		&kp KP_MULTIPLY
	    &trans	&kp PERCENT	&kp AMPS				&kp LBRC	&kp RBRC	&kp KP_EQUAL		&eqarrw		&kp KP_N1	&kp KP_N2	&kp KP_N3	&kp KP_DOT		&kp KP_DIVIDE
	    					&trans					&trans		&trans		&trans 				&trans		&kp UNDER		&trans		&trans
		>;
        };
		
			arrow_layer {
		bindings = <
	    &trans	&kp F1	&kp F2	&kp F3	&kp F4	&kp F5			&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_UP	&kp HOME	&kp END
	    &trans	&kp F6	&kp F7  &kp F8	&kp F9	&kp F10			&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT		&trans		&trans
	    &trans	&trans	&trans	&trans	&trans	&trans			&trans			&kp C_BRI_DN	&kp C_BRI_UP	&trans			&trans		&trans
	    				&trans	&trans	&trans	&trans			&trans			&trans			&trans			&trans
		>;
        };
	};
};
